#!/usr/bin/env ruby
require 'rubygems'
require 'swirl'
require 'fileutils'

DIR = File.expand_path(File.dirname(__FILE__))

module Ssh
  SecurityGroup = "ssh"
  SecurityIngress = {
    "IpPermissions.1.IpProtocol" => "tcp",
    "IpPermissions.1.FromPort"   => "22",
    "IpPermissions.1.ToPort"     => "22",
    "IpPermissions.1.IpRanges.1.CidrIp" => "0.0.0.0/0",
  }
end

module Doozer
  KeyName = "doozer"
  SecurityGroup = "doozer"
  SecurityIngress = {
    "IpPermissions.1.IpProtocol" => "tcp",
    "IpPermissions.1.FromPort"   => "8046",
    "IpPermissions.1.ToPort"     => "8046",
    "IpPermissions.1.IpRanges.1.CidrIp" => "0.0.0.0/0",

    "IpPermissions.2.IpProtocol" => "udp",
    "IpPermissions.2.FromPort"   => "8046",
    "IpPermissions.2.ToPort"     => "8046",
    "IpPermissions.2.IpRanges.1.CidrIp" => "0.0.0.0/0",

    "IpPermissions.3.IpProtocol" => "tcp",
    "IpPermissions.3.FromPort"   => "80",
    "IpPermissions.3.ToPort"     => "80",
    "IpPermissions.3.IpRanges.1.CidrIp" => "0.0.0.0/0"
  }
  BenchInstance = {
    "ImageId"       => "ami-4a0df923",
    "UserData"      => File.read(DIR+"/userdata.sh"),
    "KeyName"       => KeyName,
    "InstanceType"  => "c1.xlarge",
    "SecurityGroup" => [Ssh::SecurityGroup, SecurityGroup]
  }
end

class Launch
  attr_reader :e, :logger

  def initialize(options)
    @e = Swirl::EC2.new(options)
    @logger = STDERR
    def @logger.log(*args) ; puts "---> " + args.join(" ") ; end
  end

  def instances(*states)
    response = e.call("DescribeInstances")
    reservations = response["reservationSet"]
    instances = reservations.map {|res| res["instancesSet"] }.flatten

    instances.select do |instance|
      state = instance["instanceState"]["name"]
      states.empty? || states.include?(state)
    end
  end

  def nuke
    ids = instances.map {|instance| instance["instanceId"] }
    logger.log "terminating", *ids
    e.call "TerminateInstances", "InstanceId" => ids
  end

  def create_security_group(name, ingress)
    logger.log "creating secutiry group", name
    e.call(
      "CreateSecurityGroup",
      "GroupName" => name,
      "GroupDescription" => name
    ) rescue nil

    logger.log "authorizing ingress for", name
    e.call(ingress.merge(
      "AuthorizeSecurityGroupIngress",
      "GroupName" => name
    )) rescue nil
  end

  def run_instance(args)
    if args && args.has_key?("UserData")
      args["UserData"] = Base64.encode64(args["UserData"])
    end

    logger.log "running instances"
    response = e.call(
      "RunInstances",
      {
        "MinCount" => "1",
        "MaxCount" => "1"
      }.merge(args)
    )
    instances = response["instancesSet"]
    ids = instances.map {|instance| instance["instanceId"] }
    logger.log "instances running", *ids
  end

  def create_keypair(name)
    keypair = e.call("CreateKeyPair", "KeyName" => name)
    keypair["keyMaterial"]
  end

  def delete_key_pair(name)
    logger.log "deleteing keypair", name
    e.call("DeleteKeyPair", "KeyName" => name)
  end
end

def main(argv)

  if ! File.exists?(".launch.agree")
    message =(<<-EOS).gsub(/^\s+/, '')
      ! #$0 is intended to be used with an ec2 account that is safe for play.
      ! `--nuke` will KILL EVERYTHING!
      ! Do you still want to continue? (y/N)
    EOS
    $stderr.puts message
    abort if gets !~ /^y$/i
    FileUtils.touch ".launch.agree"
  end

  launch = Launch.new(
    :version => "2010-08-31",
    :aws_access_key_id => `git config aws.id`.chomp,
    :aws_secret_access_key => `git config aws.key`.chomp
  )

  pem = Doozer::KeyName+".pem"

  case true
  when argv.include?("--nuke")
    launch.nuke
    launch.delete_key_pair(Doozer::KeyName)
    FileUtils.rm_rf(pem)
    exit
  when argv.include?("--list") || argv.include?("-l")
    launch.instances("running", "pending").each do |instance|
      next if instance["dnsName"] == nil
      puts instance["dnsName"]
    end
  else
    if ! File.exists?(pem)
      open(pem, 'w') do |fh|
        fh << launch.create_keypair(Doozer::KeyName)
      end
    end

    launch.create_security_group(
      Doozer::SecurityGroup, Doozer::SecurityIngress
    )

    launch.create_security_group(
      Ssh::SecurityGroup, Ssh::SecurityIngress
    )

    launch.run_instance(Doozer::BenchInstance)
    main "--list"
  end
end

main(ARGV)
